
@Library('my-shared-library') _

pipeline {

    agent any
    
    parameters {

        choice(name: 'action', choices: 'create\ndelete', description: 'choose create/Destroy')
        string(name: 'ImageName', description: "name of the docker build", defaultValue: 'javapp')
        string(name: 'ImageTag', description: "tag of the docker build", defaultValue: 'v1')
        string(name: 'DockerHubUser', description: "name of the Application", defaultValue: 'lahiruud')
        
    }

    stages {

        stage('Git Checkout') {
            when { expression { params.action == 'create'}}
            steps {
                gitCheckout(
                    branch: "main",
                    url: "https://github.com/lahiruUD/mrdevops_java_app.git"
                )
            }
        }    
        stage('Unit Test maven') {
            when { expression { params.action == 'create'}}
            steps {
                script {
                    mvnTest()
                }
            }
        }  
        stage('Integration Test maven') {
            when { expression { params.action == 'create'}}
            steps {
                script {
                    mvnIntegrationTest()
                }
            }
        } 
        stage('Static Code Analysis: SonarQube') {
            when { expression { params.action == 'create'}}
            steps {
                script {
                    def SonarQubecredentialsId = 'sonar-token'
                    staticCodeAnalysis(SonarQubecredentialsId)
                }
            }
        }
        stage('Quality Gate Status check: SonarQube') {
            when { expression { params.action == 'create'}}
            steps {
                script {
                    def SonarQubecredentialsId = 'sonar-token'
                    qualityGateStatus(SonarQubecredentialsId)
                }
            }
        }
        stage('Maven Build : maven') {
            when { expression { params.action == 'create'}}
            steps {
                script {
                    mvnBuild()
                }
            }
        }
        stage('Docker Image Build') {
            when { expression { params.action == 'create'}}
            steps {
                script {

                    dockerBuild("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
                
                }
            }
        }
        stage('Docker Image Scan: trivy') {
            when { expression { params.action == 'create'}}
            steps {
                script {

                    dockerImageScan("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
                
                }
            }
        }
        stage('Docker Image Push: DockerHub') {
            when { expression { params.action == 'create'}}
            steps {
                script {

                    dockerPush("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
                
                }
            }
        }
    }
}
