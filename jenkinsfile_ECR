@Library('my-shared-library') _

pipeline {

    agent any

    parameters {

        choice(name: 'action', choices: 'create\ndelete', description: 'choose create/Destroy')
        string(name: 'aws_account_id', description: "AWS Account ID", defaultValue: '545344092443')
        string(name: 'Region', description: "Region of AWS", defaultValue: 'us-east-1')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR", defaultValue: 'lahiruud')
        string(name: 'cluster', description: "name of the EKS", defaultValue: 'demo-cluster')
        
    }
    environment{

        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
    }

    stages {

        stage('Git Checkout') {
            when { expression { params.action == 'create'}}
            steps {
                gitCheckout(
                    branch: "main",
                    url: "https://github.com/lahiruUD/mrdevops_java_app.git"
                )
            }
        }            
/*  
        stage('Unit Test maven') {
            when { expression { params.action == 'create'}}
            steps {
                script {
                    mvnTest()
                }
            }
        }  
        stage('Integration Test maven') {
            when { expression { params.action == 'create'}}
            steps {
                script {
                    mvnIntegrationTest()
                }
            }
        } 
        stage('Static Code Analysis: SonarQube') {
            when { expression { params.action == 'create'}}
            steps {
                script {
                    def SonarQubecredentialsId = 'sonar-token'
                    staticCodeAnalysis(SonarQubecredentialsId)
                }
            }
        }
        stage('Quality Gate Status check: SonarQube') {
            when { expression { params.action == 'create'}}
            steps {
                script {
                    def SonarQubecredentialsId = 'sonar-token'
                    qualityGateStatus(SonarQubecredentialsId)
                }
            }
        }
        stage('Maven Build : maven') {
            when { expression { params.action == 'create'}}
            steps {
                script {
                    mvnBuild()
                }
            }
        }
        stage('Docker Image Build : ECR') {
            when { expression { params.action == 'create'}}
            steps {
                script {

                    dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                
                }
            }
        }
        stage('Docker Image Scan: trivy') {
            when { expression { params.action == 'create'}}
            steps {
                script {

                    dockerImageScan("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                
                }
            }
        }
        stage('Docker Image Push: ECR') {
            when { expression { params.action == 'create'}}
            steps {
                script {

                    dockerPush("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                
                }
            }
        }
        stage('Docker Image Cleanup: ECR') {
            when { expression { params.action == 'create'}}
            steps {
                script {

                    dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                
                }
            }
        } 
       
        stage('Create EKS Cluster : Terraform'){
            when { expression {  params.action == 'create' } }
            steps{
                script{

                    dir('eks_module') {
                      sh """
                          
                          terraform init 
                          terraform plan -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.Region}' --var-file=./config/terraform.tfvars
                          terraform apply -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.Region}' --var-file=./config/terraform.tfvars --auto-approve
                      """
                  }
                }
            }
        }



        stage('Connect to EKS'){
            when { expression {  params.action == 'create' } }
            steps{
                script{
                    sh """ 
                        aws configure set aws_access_key_id $ACCESS_KEY
                        aws configure set secret_access_key $ACCESS_KEY
                        aws configure set region ${params.Region}
                        aws eks --region ${params.Region} update-kubeconfig --name ${params.cluster}	
                    """
                }
            }
        }
        stage('Deployment on EKS Cluster'){
            when { expression {  params.action == 'create' } }
            steps{
                script{
                   def apply = false

                   try{
                    input message: 'please confirm to deploy on eks', ok: 'Ready to apply the config ?'
                    apply = true
                  }catch(err){
                    apply= false
                    currentBuild.result  = 'UNSTABLE'
                  }
                  if(apply){

                    sh """
                      kubectl apply -f .
                    """
                   }
                }
            }
        }
*/        

        stage('Docker Image Cleanup: ECR') {
            when { expression { params.action == 'create'}}
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://172.31.57.162:6443') {
                        sh "kubectl apply -f deployment.yml -n webapps"
                        sh "kubectl get svc -n webapps"
                }
                
                }
            }
        }

    }
}    
